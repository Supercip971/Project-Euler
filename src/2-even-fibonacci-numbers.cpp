/*
    Even Fibonacci numbers:
    https://projecteuler.net/problem=2

    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
#include <iostream>
#include <numeric>
#include <vector>
void fibonacci_number_implementation(std::vector<size_t> &result_vector, size_t max, size_t left = 0, size_t right = 1)
{
    size_t result = left + right;
    if (result < max)
    {
        result_vector.push_back(result);
        fibonacci_number_implementation(result_vector, max, right, result); // recursive
        // we put the right in the left so it does:
        // (left)+(right) = (result)
        // 0 + 1 = [1]
        // 1 + 1 = [2]
        // 1 + 2 = [3]
        // 2 + 3 = [5]
        // 3 + 5 = [8]
        // 5 + 8 = [13]
        // ...
    }
}

std::vector<size_t> get_fibonacci_numbers(size_t max)
{
    std::vector<size_t> vec;
    fibonacci_number_implementation(vec, max);
    return vec;
}

std::vector<size_t> get_even(const std::vector<size_t> &vec)
{
    std::vector<size_t> result;
    for (const size_t &value : vec)
    {
        if ((value % 2) == 0)
        {
            result.push_back(value);
        }
    }
    return result;
}

int main(int argc, char **argv)
{

    auto value = get_fibonacci_numbers(4000000);
    auto value_even = get_even(value);

    size_t result = std::accumulate(value_even.begin(), value_even.end(),
                                    decltype(value_even)::value_type(0));

    std::cout << "result: " << result << std::endl;

    if (result != 4613732)
    {
        std::cout << "error: result must be equal to 4613732 [!]" << std::endl;
        return -1;
    }
    return 0;
}